webpackJsonp([51],{1749:function(n,s){n.exports={content:["article",["p","Ant Design Pro is a single-page application based on the React technology stack. We provide a development model with front-end code and local mock data. Work with server-side applications of any technology stack through the Restful APIs. The following is a brief introduction to the basic syntax of interaction with the server."],["h2","Front-end request flow"],["p","In Ant Design Pro, a complete front-end UI interaction to the server-side processing flow is like this:"],["ol",["li",["p","UI component interaction;"]],["li",["p","Call the effect of model;"]],["li",["p","Call the unified management service request function;"]],["li",["p","Send request using encapsulated request.js;"]],["li",["p","Get server return;"]],["li",["p","Then call reducer to change the state;"]],["li",["p","Update the model."]]],["p","From the above, we can see that unified request processing is placed in the services folder for the convenience of management and maintenance, and files are generally split according to the model dimension. For example:"],["pre",{lang:null,highlighted:'services<span class="token operator">/</span>\n  user<span class="token punctuation">.</span>js\n  api<span class="token punctuation">.</span>js\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>'},["code","services/\n  user.js\n  api.js\n  ..."]],["p","Among them, ",["code","utils/request.js"]," is an encapsulation, which is based on ",["a",{title:null,href:"https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Using_Fetch"},"fetch"]," and facilitates unified processing of request such as POST and GET, request header, and error message. See ",["a",{title:null,href:"https://github.com/ant-design/ant-design-pro/blob/master/src/utils/request.js"},"request.js"]," for details."],["p","An example of requesting user information in services:"],["pre",{lang:null,highlighted:'<span class="token operator">/</span><span class="token operator">/</span> services<span class="token operator">/</span>user<span class="token punctuation">.</span>js\nimport request from <span class="token string">\'../utils/request\'</span><span class="token comment" spellcheck="true">;</span>\n\nexport async function <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n  return <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/api/users\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}\n\nexport async function <span class="token function">queryCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n  return <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/api/currentUser\'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> models<span class="token operator">/</span>user<span class="token punctuation">.</span>js\nimport { queryCurrent } from <span class="token string">\'../services/user\'</span><span class="token comment" spellcheck="true">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\neffects<span class="token punctuation">:</span> {\n  <span class="token operator">*</span><span class="token function">fetch</span><span class="token punctuation">(</span>{ payload }<span class="token punctuation">,</span> { call<span class="token punctuation">,</span> put }<span class="token punctuation">)</span> {\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> yield <span class="token function">call</span><span class="token punctuation">(</span>queryUsers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  }<span class="token punctuation">,</span>\n}'},["code","// services/user.js\nimport request from '../utils/request';\n\nexport async function query() {\n  return request('/api/users');\n}\n\nexport async function queryCurrent() {\n  return request('/api/currentUser');\n}\n\n// models/user.js\nimport { queryCurrent } from '../services/user';\n...\neffects: {\n  *fetch({ payload }, { call, put }) {\n    ...\n    const response = yield call(queryUsers);\n    ...\n  },\n}"]],["h3","Effect handling async requests"],["p","When dealing with complex async requests, it's easy to clutter the logic and get stuck in a nesting trap, so Ant Design Pro's underlying infrastructure ",["a",{title:null,href:"https://github.com/dvajs/dva"},"dva"]," uses the ",["code","effect"]," approach. To manage synchronous async requests:"],["pre",{lang:"js",highlighted:'effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">*</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'changeLoading\'</span><span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">// async request 1</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>queryFakeList<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'save\'</span><span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> response<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">// async request 2</span>\n    <span class="token keyword">const</span> response2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>queryFakeList2<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'save2\'</span><span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> response2<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'changeLoading\'</span><span class="token punctuation">,</span>\n      payload<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>'},["code","effects: {\n  *fetch({ payload }, { call, put }) {\n    yield put({\n      type: 'changeLoading',\n      payload: true,\n    });\n    // async request 1\n    const response = yield call(queryFakeList, payload);\n    yield put({\n      type: 'save',\n      payload: response,\n    });\n    // async request 2\n    const response2 = yield call(queryFakeList2, payload);\n    yield put({\n      type: 'save2',\n      payload: response2,\n    });\n    yield put({\n      type: 'changeLoading',\n      payload: false,\n    });\n  },\n},"]],["p","Through ",["a",{title:null,href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/function*"},"generator"]," and ",["a",{title:null,href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/yield"},"yield"]," makes the logical processing of asynchronous calls just like synchronizing. See ",["a",{title:null,href:"https://github.com/dvajs/dva/blob/master/docs/GettingStarted.md#async-logic"},"dva async logic"]," for more details."],["h2","Switch from mock directly to server request"],["p","In general, as long as the mock api and the real server api are the same, you only need to redirect the mock to the corresponding server interface."],["pre",{lang:"js",highlighted:'<span class="token comment" spellcheck="true">// .roadhogrc.mock.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string">\'GET /api/(.*)\'</span><span class="token punctuation">:</span> <span class="token string">\'https://your.server.com/api/\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>'},["code","// .roadhogrc.mock.js\nexport default {\n  'GET /api/(.*)': 'https://your.server.com/api/',\n};"]],["p","So the api ",["code","http://localhost:8001/api/applications"]," in your browser will be reverse proxyed to ",["code","https://your.server.com/api/applications"],"."],["h3","Close mock"],["p","To close the mock method we recommend using environment variables, which you can set in ",["code","package.json"],":"],["pre",{lang:"js",highlighted:'<span class="token string">"script"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"roadhog server"</span><span class="token punctuation">,</span>\n  <span class="token string">"start:no-proxy"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NO_PROXY=true roadhog server"</span>\n<span class="token punctuation">}</span>'},["code",'"script" : {\n  "start": "roadhog server",\n  "start:no-proxy": "cross-env NO_PROXY=true roadhog server"\n}']],["p","Then make a judgment in ",["code",".roadhogrc.mock.js"],":"],["pre",{lang:"js",highlighted:'<span class="token keyword">const</span> noProxy <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NO_PROXY <span class="token operator">===</span> <span class="token string">\'true\'</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> noProxy <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token function">delay</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","const noProxy = process.env.NO_PROXY === 'true';\n...\nexport default noProxy ? {} : delay(proxy, 1000);"]]],meta:{order:7,title:"Work with Server",type:"Introduction",filename:"docs/server.en-US.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#Front-end-request-flow",title:"Front-end request flow"},"Front-end request flow"]],["li",["a",{className:"bisheng-toc-h2",href:"#Switch-from-mock-directly-to-server-request",title:"Switch from mock directly to server request"},"Switch from mock directly to server request"]]]}}});